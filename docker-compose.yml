x-service: &default-service
  build:
    context: .
  environment:
    DD_TRACE_STARTUP_LOGS: "false"
    DJANGO_SETTINGS_MODULE: fantasy_football_catalog.settings
    PYTHONBREAKPOINT: "${PYTHONBREAKPOINT:-ipdb.set_trace}"
  restart: "no"
  working_dir: /ff
  image: fantasy-football-catalog:latest
  depends_on:
    db:
      condition: service_healthy
  networks:
    - db
  volumes:
    - ./fantasy_football_catalog:/ff/fantasy_football_catalog:cached

services:
  test:
    <<: *default-service
    environment:
      DJANGO_SETTINGS_MODULE: fantasy_football_catalog.settings
    entrypoint: pytest -s

  migrate:
    <<: *default-service
    entrypoint: django-admin migrate

  makemigrations:
    <<: *default-service
    entrypoint: django-admin makemigrations

  manage:
    <<: *default-service
    entrypoint: python manage.py

  python:
    <<: *default-service
    entrypoint: python

  shell:
    <<: *default-service
    entrypoint: python manage.py shell

  dbshell:
    <<: *default-service
    entrypoint: python manage.py dbshell

  runserver:
    <<: *default-service
    entrypoint: python manage.py runserver 0.0.0.0:8000
    stdin_open: true
    ports:
      - "8000:8000"

  bash:
    <<: *default-service
    entrypoint: /bin/bash

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: fantasy_football_catalog
    networks:
      - db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "fantasy_football_catalog" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 2s

  redis:
    # aws elasticache is compatible with redis 5
    image: redis:5 # x86 and aarch64 compatible
    restart: always
    networks:
      - redis

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - mq_data:/var/lib/rabbitmq
    networks:
      - mq_net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 60s
      timeout: 3s
      retries: 6
      start_period: 5s
    # Set the following in docker-compose.override.yml for access to RabbitMQ's
    # web UI.
    #
    # Please avoid commiting the ports block uncommented (may lead to port
    # conflicts for devs in their local environments).
    #
    # Run `docker compose up rabbitmq` and visit http://localhost:15672/ . Use
    # the user and password defined in the environment block above.
    #
    # ports:
    #   - "15672:15672"

  celery_worker:
    <<: *default-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    entrypoint: "celery -A fantasy_football_catalog.celery_app worker --loglevel debug -n worker.local -Q fantasy-football-catalog"


volumes:
  db_data:
  mq_data:

networks:
  db:
  redis:
  mq_net:
